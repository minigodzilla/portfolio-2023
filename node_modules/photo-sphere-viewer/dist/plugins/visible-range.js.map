{"version":3,"file":"visible-range.js","sources":["../../src/plugins/visible-range/index.js"],"sourcesContent":["import { MathUtils } from 'three';\nimport { AbstractPlugin, CONSTANTS, utils } from '../..';\n\n\n/**\n * @typedef {Object} PSV.plugins.VisibleRangePlugin.Options\n * @property {double[]|string[]} [latitudeRange] - latitude range as two angles\n * @property {double[]|string[]} [longitudeRange] - longitude range as two angles\n * @property {boolean} [usePanoData=false] - use panoData as visible range, you can also manually call `setRangesFromPanoData`\n */\n\nconst EPS = 0.000001;\n\n/**\n * @summary Locks visible longitude and/or latitude\n * @extends PSV.plugins.AbstractPlugin\n * @memberof PSV.plugins\n */\nexport class VisibleRangePlugin extends AbstractPlugin {\n\n  static id = 'visible-range';\n\n  /**\n   * @param {PSV.Viewer} psv\n   * @param {PSV.plugins.VisibleRangePlugin.Options} options\n   */\n  constructor(psv, options) {\n    super(psv);\n\n    /**\n     * @member {PSV.plugins.VisibleRangePlugin.Options}\n     * @private\n     */\n    this.config = {\n      latitudeRange : null,\n      longitudeRange: null,\n      usePanoData   : false,\n      ...options,\n    };\n  }\n\n  /**\n   * @package\n   */\n  init() {\n    super.init();\n\n    this.psv.on(CONSTANTS.EVENTS.PANORAMA_LOADED, this);\n    this.psv.on(CONSTANTS.EVENTS.POSITION_UPDATED, this);\n    this.psv.on(CONSTANTS.EVENTS.ZOOM_UPDATED, this);\n    this.psv.on(CONSTANTS.CHANGE_EVENTS.GET_ANIMATE_POSITION, this);\n    this.psv.on(CONSTANTS.CHANGE_EVENTS.GET_ROTATE_POSITION, this);\n\n    this.setLatitudeRange(this.config.latitudeRange);\n    this.setLongitudeRange(this.config.longitudeRange);\n  }\n\n  /**\n   * @package\n   */\n  destroy() {\n    this.psv.off(CONSTANTS.EVENTS.PANORAMA_LOADED, this);\n    this.psv.off(CONSTANTS.EVENTS.POSITION_UPDATED, this);\n    this.psv.off(CONSTANTS.EVENTS.ZOOM_UPDATED, this);\n    this.psv.off(CONSTANTS.CHANGE_EVENTS.GET_ANIMATE_POSITION, this);\n    this.psv.off(CONSTANTS.CHANGE_EVENTS.GET_ROTATE_POSITION, this);\n\n    super.destroy();\n  }\n\n  /**\n   * @private\n   */\n  // eslint-disable-next-line consistent-return\n  handleEvent(e) {\n    let sidesReached;\n    let rangedPosition;\n    let currentPosition;\n\n    switch (e.type) {\n      case CONSTANTS.CHANGE_EVENTS.GET_ANIMATE_POSITION:\n      case CONSTANTS.CHANGE_EVENTS.GET_ROTATE_POSITION:\n        currentPosition = e.value;\n        ({ rangedPosition } = this.applyRanges(currentPosition));\n\n        return rangedPosition;\n\n      case CONSTANTS.EVENTS.POSITION_UPDATED:\n        currentPosition = e.args[0];\n        ({ sidesReached, rangedPosition } = this.applyRanges(currentPosition));\n\n        if ((sidesReached.left || sidesReached.right) && this.psv.isAutorotateEnabled()) {\n          this.__reverseAutorotate(sidesReached.left, sidesReached.right);\n        }\n        else if (Math.abs(currentPosition.longitude - rangedPosition.longitude) > EPS\n          || Math.abs(currentPosition.latitude - rangedPosition.latitude) > EPS) {\n          this.psv.dynamics.position.setValue(rangedPosition);\n        }\n        break;\n\n      case CONSTANTS.EVENTS.PANORAMA_LOADED:\n        if (this.config.usePanoData) {\n          this.setRangesFromPanoData();\n        }\n        break;\n\n      case CONSTANTS.EVENTS.ZOOM_UPDATED:\n        currentPosition = this.psv.getPosition();\n        ({ rangedPosition } = this.applyRanges(currentPosition));\n\n        if (Math.abs(currentPosition.longitude - rangedPosition.longitude) > EPS\n          || Math.abs(currentPosition.latitude - rangedPosition.latitude) > EPS) {\n          this.psv.rotate(rangedPosition);\n        }\n        break;\n\n      default:\n    }\n  }\n\n  /**\n   * @summary Changes the latitude range\n   * @param {double[]|string[]} range - latitude range as two angles\n   */\n  setLatitudeRange(range) {\n    // latitude range must have two values\n    if (range && range.length !== 2) {\n      utils.logWarn('latitude range must have exactly two elements');\n      range = null;\n    }\n    // latitude range must be ordered\n    else if (range && range[0] > range[1]) {\n      utils.logWarn('latitude range values must be ordered');\n      range = [range[1], range[0]];\n    }\n    // latitude range is between -PI/2 and PI/2\n    if (range) {\n      this.config.latitudeRange = range.map(angle => utils.parseAngle(angle, true));\n    }\n    else {\n      this.config.latitudeRange = null;\n    }\n\n    if (this.psv.prop.ready) {\n      this.psv.rotate(this.psv.getPosition());\n    }\n  }\n\n  /**\n   * @summary Changes the longitude range\n   * @param {double[]|string[]} range - longitude range as two angles\n   */\n  setLongitudeRange(range) {\n    // longitude range must have two values\n    if (range && range.length !== 2) {\n      utils.logWarn('longitude range must have exactly two elements');\n      range = null;\n    }\n    // longitude range is between 0 and 2*PI\n    if (range) {\n      this.config.longitudeRange = range.map(angle => utils.parseAngle(angle));\n    }\n    else {\n      this.config.longitudeRange = null;\n    }\n\n    if (this.psv.prop.ready) {\n      this.psv.rotate(this.psv.getPosition());\n    }\n  }\n\n  /**\n   * @summary Changes the latitude and longitude ranges according the current panorama cropping data\n   */\n  setRangesFromPanoData() {\n    this.setLatitudeRange(this.getPanoLatitudeRange());\n    this.setLongitudeRange(this.getPanoLongitudeRange());\n  }\n\n  /**\n   * @summary Gets the latitude range defined by the viewer's panoData\n   * @returns {double[]|null}\n   * @private\n   */\n  getPanoLatitudeRange() {\n    const p = this.psv.prop.panoData;\n    if (p.croppedHeight === p.fullHeight) {\n      return null;\n    }\n    else {\n      const latitude = y => Math.PI * (1 - y / p.fullHeight) - (Math.PI / 2);\n      return [latitude(p.croppedY + p.croppedHeight), latitude(p.croppedY)];\n    }\n  }\n\n  /**\n   * @summary Gets the longitude range defined by the viewer's panoData\n   * @returns {double[]|null}\n   * @private\n   */\n  getPanoLongitudeRange() {\n    const p = this.psv.prop.panoData;\n    if (p.croppedWidth === p.fullWidth) {\n      return null;\n    }\n    else {\n      const longitude = x => 2 * Math.PI * (x / p.fullWidth) - Math.PI;\n      return [longitude(p.croppedX), longitude(p.croppedX + p.croppedWidth)];\n    }\n  }\n\n  /**\n   * @summary Apply \"longitudeRange\" and \"latitudeRange\"\n   * @param {PSV.Position} position\n   * @returns {{rangedPosition: PSV.Position, sidesReached: string[]}}\n   * @private\n   */\n  applyRanges(position) {\n    const rangedPosition = {\n      longitude: position.longitude,\n      latitude : position.latitude,\n    };\n    const sidesReached = {};\n\n    let range;\n    let offset;\n\n    if (this.config.longitudeRange) {\n      range = utils.clone(this.config.longitudeRange);\n      offset = MathUtils.degToRad(this.psv.prop.hFov) / 2;\n\n      range[0] = utils.parseAngle(range[0] + offset);\n      range[1] = utils.parseAngle(range[1] - offset);\n\n      if (range[0] > range[1]) { // when the range cross longitude 0\n        if (position.longitude > range[1] && position.longitude < range[0]) {\n          if (position.longitude > (range[0] / 2 + range[1] / 2)) { // detect which side we are closer too\n            rangedPosition.longitude = range[0];\n            sidesReached.left = true;\n          }\n          else {\n            rangedPosition.longitude = range[1];\n            sidesReached.right = true;\n          }\n        }\n      }\n      else if (position.longitude < range[0]) {\n        rangedPosition.longitude = range[0];\n        sidesReached.left = true;\n      }\n      else if (position.longitude > range[1]) {\n        rangedPosition.longitude = range[1];\n        sidesReached.right = true;\n      }\n    }\n\n    if (this.config.latitudeRange) {\n      range = utils.clone(this.config.latitudeRange);\n      offset = MathUtils.degToRad(this.psv.prop.vFov) / 2;\n\n      range[0] = utils.parseAngle(range[0] + offset, true);\n      range[1] = utils.parseAngle(range[1] - offset, true);\n\n      // for very a narrow images, lock the latitude to the center\n      if (range[0] > range[1]) {\n        range[0] = (range[0] + range[1]) / 2;\n        range[1] = range[0];\n      }\n\n      if (position.latitude < range[0]) {\n        rangedPosition.latitude = range[0];\n        sidesReached.bottom = true;\n      }\n      else if (position.latitude > range[1]) {\n        rangedPosition.latitude = range[1];\n        sidesReached.top = true;\n      }\n    }\n\n    return { rangedPosition, sidesReached };\n  }\n\n  /**\n   * @summary Reverses autorotate direction with smooth transition\n   * @private\n   */\n  __reverseAutorotate(left, right) {\n    // reverse already ongoing\n    if (left && this.psv.config.autorotateSpeed > 0 || right && this.psv.config.autorotateSpeed < 0) {\n      return;\n    }\n\n    this.psv.config.autorotateSpeed = -this.psv.config.autorotateSpeed;\n    this.psv.startAutorotate(true);\n  }\n\n}\n"],"names":["EPS","VisibleRangePlugin","psv","options","config","latitudeRange","longitudeRange","usePanoData","init","on","CONSTANTS","EVENTS","PANORAMA_LOADED","POSITION_UPDATED","ZOOM_UPDATED","CHANGE_EVENTS","GET_ANIMATE_POSITION","GET_ROTATE_POSITION","setLatitudeRange","setLongitudeRange","destroy","off","handleEvent","e","sidesReached","rangedPosition","currentPosition","type","value","applyRanges","args","left","right","isAutorotateEnabled","__reverseAutorotate","Math","abs","longitude","latitude","dynamics","position","setValue","setRangesFromPanoData","getPosition","rotate","range","length","utils","logWarn","map","angle","parseAngle","prop","ready","getPanoLatitudeRange","getPanoLongitudeRange","p","panoData","croppedHeight","fullHeight","y","PI","croppedY","croppedWidth","fullWidth","x","croppedX","offset","clone","MathUtils","degToRad","hFov","vFov","bottom","top","autorotateSpeed","startAutorotate","AbstractPlugin","id"],"mappings":"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"}