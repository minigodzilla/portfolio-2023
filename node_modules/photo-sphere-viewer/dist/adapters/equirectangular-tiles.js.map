{"version":3,"file":"equirectangular-tiles.js","sources":["../../src/adapters/shared/Task.js","../../src/adapters/shared/Queue.js","../../src/adapters/shared/tiles-utils.js","../../src/adapters/equirectangular-tiles/index.js"],"sourcesContent":["/**\n * @summary Loading task\n * @memberOf PSV.adapters\n * @private\n */\nexport class Task {\n\n  static STATUS = {\n    DISABLED : -1,\n    PENDING  : 0,\n    RUNNING  : 1,\n    CANCELLED: 2,\n    DONE     : 3,\n    ERROR    : 4,\n  };\n\n  /**\n   * @param {string} id\n   * @param {number} priority\n   * @param {function(Task): Promise} fn\n   */\n  constructor(id, priority, fn) {\n    this.id = id;\n    this.priority = priority;\n    this.fn = fn;\n    this.status = Task.STATUS.PENDING;\n  }\n\n  start() {\n    this.status = Task.STATUS.RUNNING;\n    return this.fn(this)\n      .then(() => {\n        this.status = Task.STATUS.DONE;\n      }, () => {\n        this.status = Task.STATUS.ERROR;\n      });\n  }\n\n  cancel() {\n    this.status = Task.STATUS.CANCELLED;\n  }\n\n  isCancelled() {\n    return this.status === Task.STATUS.CANCELLED;\n  }\n\n}\n","import { Task } from './Task';\n\n/**\n * @summary Loading queue\n * @memberOf PSV.adapters\n * @private\n */\nexport class Queue {\n\n  /**\n   * @param {int} concurency\n   */\n  constructor(concurency = 4) {\n    this.concurency = concurency;\n    this.runningTasks = {};\n    this.tasks = {};\n  }\n\n  enqueue(task) {\n    this.tasks[task.id] = task;\n  }\n\n  clear() {\n    Object.values(this.tasks).forEach(task => task.cancel());\n    this.tasks = {};\n    this.runningTasks = {};\n  }\n\n  setPriority(taskId, priority) {\n    const task = this.tasks[taskId];\n    if (task) {\n      task.priority = priority;\n      if (task.status === Task.STATUS.DISABLED) {\n        task.status = Task.STATUS.PENDING;\n      }\n    }\n  }\n\n  disableAllTasks() {\n    Object.values(this.tasks).forEach((task) => {\n      task.status = Task.STATUS.DISABLED;\n    });\n  }\n\n  start() {\n    if (Object.keys(this.runningTasks).length >= this.concurency) {\n      return;\n    }\n\n    const nextTask = Object.values(this.tasks)\n      .filter(task => task.status === Task.STATUS.PENDING)\n      .sort((a, b) => b.priority - a.priority)\n      .pop();\n\n    if (nextTask) {\n      this.runningTasks[nextTask.id] = true;\n\n      nextTask.start()\n        .then(() => {\n          if (!nextTask.isCancelled()) {\n            delete this.tasks[nextTask.id];\n            delete this.runningTasks[nextTask.id];\n            this.start();\n          }\n        });\n\n      this.start(); // start tasks until max concurrency is reached\n    }\n  }\n\n}\n","import { CanvasTexture, LineSegments, Mesh, MeshBasicMaterial, SphereGeometry, WireframeGeometry } from 'three';\nimport { SYSTEM, utils } from '../..';\n\n/**\n * @summary Generates an material for errored tiles\n * @memberOf PSV.adapters\n * @return {external:THREE.MeshBasicMaterial}\n * @private\n */\nexport function buildErrorMaterial(width, height) {\n  const canvas = document.createElement('canvas');\n  canvas.width = width;\n  canvas.height = height;\n\n  const ctx = canvas.getContext('2d');\n\n  ctx.fillStyle = '#333';\n  ctx.fillRect(0, 0, canvas.width, canvas.height);\n  ctx.font = `${canvas.width / 5}px serif`;\n  ctx.fillStyle = '#a22';\n  ctx.textAlign = 'center';\n  ctx.textBaseline = 'middle';\n  ctx.fillText('⚠', canvas.width / 2, canvas.height / 2);\n\n  const texture = new CanvasTexture(canvas);\n  return new MeshBasicMaterial({ map: texture });\n}\n\n/**\n * @summary Create the texture for the base image\n * @memberOf PSV.adapters\n * @param {HTMLImageElement} img\n * @param {boolean} blur\n * @param {function} getHeight\n * @return {external:THREE.Texture}\n * @private\n */\nexport function createBaseTexture(img, blur, getHeight) {\n  if (blur || img.width > SYSTEM.maxTextureWidth) {\n    const ratio = Math.min(1, SYSTEM.getMaxCanvasWidth() / img.width);\n\n    const buffer = document.createElement('canvas');\n    buffer.width = img.width * ratio;\n    buffer.height = getHeight(img.width);\n\n    const ctx = buffer.getContext('2d');\n    if (blur) {\n      ctx.filter = 'blur(1px)';\n    }\n    ctx.drawImage(img, 0, 0, buffer.width, buffer.height);\n\n    return utils.createTexture(buffer);\n  }\n\n  return utils.createTexture(img);\n}\n\n/**\n * @summary Creates a wireframe geometry, for debug\n * @memberOf PSV.adapters\n * @param {THREE.BufferGeometry} geometry\n * @return {THREE.Object3D}\n * @private\n */\nexport function createWireFrame(geometry) {\n  const wireframe = new WireframeGeometry(geometry);\n  const line = new LineSegments(wireframe);\n  line.material.depthTest = false;\n  line.material.opacity = 0.25;\n  line.material.transparent = true;\n  return line;\n}\n\n/**\n * @summary Creates a small red sphere, for debug\n * @memberOf PSV.adapters\n * @return {THREE.Object3D}\n * @private\n */\nexport function createDot(x, y, z) {\n  const geom = new SphereGeometry(0.1);\n  const material = new MeshBasicMaterial({ color: 0xff0000 });\n  const mesh = new Mesh(geom, material);\n  mesh.position.set(x, y, z);\n  return mesh;\n}\n","import { Frustum, ImageLoader, MathUtils, Matrix4, Mesh, MeshBasicMaterial, SphereGeometry, Vector3 } from 'three';\nimport { CONSTANTS, EquirectangularAdapter, PSVError, utils } from '../..';\nimport { Queue } from '../shared/Queue';\nimport { Task } from '../shared/Task';\nimport { buildErrorMaterial, createBaseTexture } from '../shared/tiles-utils';\n\n\n/**\n * @callback TileUrl\n * @summary Function called to build a tile url\n * @memberOf PSV.adapters.EquirectangularTilesAdapter\n * @param {int} col\n * @param {int} row\n * @returns {string}\n */\n\n/**\n * @typedef {Object} PSV.adapters.EquirectangularTilesAdapter.Panorama\n * @summary Configuration of a tiled panorama\n * @property {string} [baseUrl] - low resolution panorama loaded before tiles\n * @property {PSV.PanoData | PSV.PanoDataProvider} [basePanoData] - panoData configuration associated to low resolution panorama loaded before tiles\n * @property {int} width - complete panorama width (height is always width/2)\n * @property {int} cols - number of vertical tiles\n * @property {int} rows - number of horizontal tiles\n * @property {PSV.adapters.EquirectangularTilesAdapter.TileUrl} tileUrl - function to build a tile url\n */\n\n/**\n * @typedef {Object} PSV.adapters.EquirectangularTilesAdapter.Options\n * @property {number} [resolution=64] - number of faces of the sphere geometry, higher values may decrease performances\n * @property {boolean} [showErrorTile=true] - shows a warning sign on tiles that cannot be loaded\n * @property {boolean} [baseBlur=true] - applies a blur to the low resolution panorama\n */\n\n/**\n * @typedef {Object} PSV.adapters.EquirectangularTilesAdapter.Tile\n * @private\n * @property {int} col\n * @property {int} row\n * @property {float} angle\n */\n\n/* the faces of the top and bottom rows are made of a single triangle (3 vertices)\n * all other faces are made of two triangles (6 vertices)\n * bellow is the indexing of each face vertices\n *\n * first row faces:\n *     ⋀\n *    /0\\\n *   /   \\\n *  /     \\\n * /1     2\\\n * ¯¯¯¯¯¯¯¯¯\n *\n * other rows faces:\n * _________\n * |\\1    0|\n * |3\\     |\n * |  \\    |\n * |   \\   |\n * |    \\  |\n * |     \\2|\n * |4    5\\|\n * ¯¯¯¯¯¯¯¯¯\n *\n * last row faces:\n * _________\n * \\1     0/\n *  \\     /\n *   \\   /\n *    \\2/\n *     ⋁\n */\n\nconst ATTR_UV = 'uv';\nconst ATTR_ORIGINAL_UV = 'originaluv';\nconst ATTR_POSITION = 'position';\n\nfunction tileId(tile) {\n  return `${tile.col}x${tile.row}`;\n}\n\nconst frustum = new Frustum();\nconst projScreenMatrix = new Matrix4();\nconst vertexPosition = new Vector3();\n\n\n/**\n * @summary Adapter for tiled panoramas\n * @memberof PSV.adapters\n * @extends PSV.adapters.AbstractAdapter\n */\nexport class EquirectangularTilesAdapter extends EquirectangularAdapter {\n\n  static id = 'equirectangular-tiles';\n  static supportsDownload = false;\n  static supportsOverlay = false;\n\n  /**\n   * @param {PSV.Viewer} psv\n   * @param {PSV.adapters.EquirectangularTilesAdapter.Options} options\n   */\n  constructor(psv, options) {\n    super(psv);\n\n    this.psv.config.useXmpData = false;\n\n    /**\n     * @member {PSV.adapters.EquirectangularTilesAdapter.Options}\n     * @private\n     */\n    this.config = {\n      resolution   : 64,\n      showErrorTile: true,\n      baseBlur     : true,\n      ...options,\n    };\n\n    if (!MathUtils.isPowerOfTwo(this.config.resolution)) {\n      throw new PSVError('EquirectangularAdapter resolution must be power of two');\n    }\n\n    this.SPHERE_SEGMENTS = this.config.resolution;\n    this.SPHERE_HORIZONTAL_SEGMENTS = this.SPHERE_SEGMENTS / 2;\n    this.NB_VERTICES_BY_FACE = 6;\n    this.NB_VERTICES_BY_SMALL_FACE = 3;\n    this.NB_VERTICES = 2 * this.SPHERE_SEGMENTS * this.NB_VERTICES_BY_SMALL_FACE\n      + (this.SPHERE_HORIZONTAL_SEGMENTS - 2) * this.SPHERE_SEGMENTS * this.NB_VERTICES_BY_FACE;\n    this.NB_GROUPS = this.SPHERE_SEGMENTS * this.SPHERE_HORIZONTAL_SEGMENTS;\n\n    /**\n     * @member {PSV.adapters.Queue}\n     * @private\n     */\n    this.queue = new Queue();\n\n    /**\n     * @type {Object}\n     * @property {int} colSize - size in pixels of a column\n     * @property {int} rowSize - size in pixels of a row\n     * @property {int} facesByCol - number of mesh faces by column\n     * @property {int} facesByRow - number of mesh faces by row\n     * @property {Record<string, boolean>} tiles - loaded tiles\n     * @property {external:THREE.SphereGeometry} geom\n     * @property {external:THREE.MeshBasicMaterial[]} materials\n     * @property {external:THREE.MeshBasicMaterial} errorMaterial\n     * @private\n     */\n    this.prop = {\n      colSize      : 0,\n      rowSize      : 0,\n      facesByCol   : 0,\n      facesByRow   : 0,\n      tiles        : {},\n      geom         : null,\n      materials    : [],\n      errorMaterial: null,\n    };\n\n    /**\n     * @member {external:THREE.ImageLoader}\n     * @private\n     */\n    this.loader = new ImageLoader();\n    if (this.psv.config.withCredentials) {\n      this.loader.setWithCredentials(true);\n    }\n    if (this.psv.config.requestHeaders && typeof this.psv.config.requestHeaders === 'object') {\n      this.loader.setRequestHeader(this.psv.config.requestHeaders);\n    }\n\n    this.psv.on(CONSTANTS.EVENTS.POSITION_UPDATED, this);\n    this.psv.on(CONSTANTS.EVENTS.ZOOM_UPDATED, this);\n  }\n\n  /**\n   * @override\n   */\n  destroy() {\n    this.psv.off(CONSTANTS.EVENTS.POSITION_UPDATED, this);\n    this.psv.off(CONSTANTS.EVENTS.ZOOM_UPDATED, this);\n\n    this.__cleanup();\n\n    this.prop.errorMaterial?.map?.dispose();\n    this.prop.errorMaterial?.dispose();\n\n    delete this.queue;\n    delete this.loader;\n    delete this.prop.geom;\n    delete this.prop.errorMaterial;\n\n    super.destroy();\n  }\n\n  /**\n   * @private\n   */\n  handleEvent(e) {\n    /* eslint-disable */\n    switch (e.type) {\n      case CONSTANTS.EVENTS.POSITION_UPDATED:\n      case CONSTANTS.EVENTS.ZOOM_UPDATED:\n        this.__refresh();\n        break;\n    }\n    /* eslint-enable */\n  }\n\n  /**\n   * @summary Clears loading queue, dispose all materials\n   * @private\n   */\n  __cleanup() {\n    this.queue.clear();\n    this.prop.tiles = {};\n\n    this.prop.materials.forEach((mat) => {\n      mat?.map?.dispose();\n      mat?.dispose();\n    });\n    this.prop.materials.length = 0;\n  }\n\n  /**\n   * @override\n   */\n  supportsTransition(panorama) {\n    return !!panorama.baseUrl;\n  }\n\n  /**\n   * @override\n   */\n  supportsPreload(panorama) {\n    return !!panorama.baseUrl;\n  }\n\n  /**\n   * @override\n   * @param {PSV.adapters.EquirectangularTilesAdapter.Panorama} panorama\n   * @returns {Promise.<PSV.TextureData>}\n   */\n  loadTexture(panorama) {\n    if (typeof panorama !== 'object' || !panorama.width || !panorama.cols || !panorama.rows || !panorama.tileUrl) {\n      return Promise.reject(new PSVError('Invalid panorama configuration, are you using the right adapter?'));\n    }\n    if (panorama.cols > this.SPHERE_SEGMENTS) {\n      return Promise.reject(new PSVError(`Panorama cols must not be greater than ${this.SPHERE_SEGMENTS}.`));\n    }\n    if (panorama.rows > this.SPHERE_HORIZONTAL_SEGMENTS) {\n      return Promise.reject(new PSVError(`Panorama rows must not be greater than ${this.SPHERE_HORIZONTAL_SEGMENTS}.`));\n    }\n    if (!MathUtils.isPowerOfTwo(panorama.cols) || !MathUtils.isPowerOfTwo(panorama.rows)) {\n      return Promise.reject(new PSVError('Panorama cols and rows must be powers of 2.'));\n    }\n\n    const panoData = {\n      fullWidth    : panorama.width,\n      fullHeight   : panorama.width / 2,\n      croppedWidth : panorama.width,\n      croppedHeight: panorama.width / 2,\n      croppedX     : 0,\n      croppedY     : 0,\n      poseHeading  : 0,\n      posePitch    : 0,\n      poseRoll     : 0,\n    };\n\n    if (panorama.baseUrl) {\n      return super.loadTexture(panorama.baseUrl, panorama.basePanoData)\n        .then(textureData => ({\n          panorama: panorama,\n          texture : textureData.texture,\n          panoData: panoData,\n        }));\n    }\n    else {\n      return Promise.resolve({ panorama, panoData });\n    }\n  }\n\n  /**\n   * @override\n   */\n  createMesh(scale = 1) {\n    const geometry = new SphereGeometry(\n      CONSTANTS.SPHERE_RADIUS * scale,\n      this.SPHERE_SEGMENTS,\n      this.SPHERE_HORIZONTAL_SEGMENTS,\n      -Math.PI / 2\n    )\n      .scale(-1, 1, 1)\n      .toNonIndexed();\n\n    geometry.clearGroups();\n    let i = 0;\n    let k = 0;\n    // first row\n    for (; i < this.SPHERE_SEGMENTS * this.NB_VERTICES_BY_SMALL_FACE; i += this.NB_VERTICES_BY_SMALL_FACE) {\n      geometry.addGroup(i, this.NB_VERTICES_BY_SMALL_FACE, k++);\n    }\n    // second to before last rows\n    for (; i < this.NB_VERTICES - this.SPHERE_SEGMENTS * this.NB_VERTICES_BY_SMALL_FACE; i += this.NB_VERTICES_BY_FACE) {\n      geometry.addGroup(i, this.NB_VERTICES_BY_FACE, k++);\n    }\n    // last row\n    for (; i < this.NB_VERTICES; i += this.NB_VERTICES_BY_SMALL_FACE) {\n      geometry.addGroup(i, this.NB_VERTICES_BY_SMALL_FACE, k++);\n    }\n\n    geometry.setAttribute(ATTR_ORIGINAL_UV, geometry.getAttribute(ATTR_UV).clone());\n\n    return new Mesh(geometry, []);\n  }\n\n  /**\n   * @summary Applies the base texture and starts the loading of tiles\n   * @override\n   */\n  setTexture(mesh, textureData, transition) {\n    const { panorama, texture } = textureData;\n\n    if (transition) {\n      this.__setTexture(mesh, texture);\n      return;\n    }\n\n    this.__cleanup();\n    this.__setTexture(mesh, texture);\n\n    this.prop.materials = mesh.material;\n    this.prop.geom = mesh.geometry;\n    this.prop.geom.setAttribute(ATTR_UV, this.prop.geom.getAttribute(ATTR_ORIGINAL_UV).clone());\n\n    this.prop.colSize = panorama.width / panorama.cols;\n    this.prop.rowSize = panorama.width / 2 / panorama.rows;\n    this.prop.facesByCol = this.SPHERE_SEGMENTS / panorama.cols;\n    this.prop.facesByRow = this.SPHERE_HORIZONTAL_SEGMENTS / panorama.rows;\n\n    // this.psv.renderer.scene.add(createWireFrame(this.prop.geom));\n\n    setTimeout(() => this.__refresh(true));\n  }\n\n  /**\n   * @private\n   */\n  __setTexture(mesh, texture) {\n    let material;\n    if (texture) {\n      material = new MeshBasicMaterial({ map: texture });\n    }\n    else {\n      material = new MeshBasicMaterial({ opacity: 0, transparent: true });\n    }\n\n    for (let i = 0; i < this.NB_GROUPS; i++) {\n      mesh.material.push(material);\n    }\n  }\n\n  /**\n   * @override\n   */\n  setTextureOpacity(mesh, opacity) {\n    mesh.material[0].opacity = opacity;\n    mesh.material[0].transparent = opacity < 1;\n  }\n\n  /**\n   * @summary Compute visible tiles and load them\n   * @param {boolean} [init=false] Indicates initial call\n   * @private\n   */\n  __refresh(init = false) { // eslint-disable-line no-unused-vars\n    if (!this.prop.geom) {\n      return;\n    }\n\n    const camera = this.psv.renderer.camera;\n    camera.updateMatrixWorld();\n    projScreenMatrix.multiplyMatrices(camera.projectionMatrix, camera.matrixWorldInverse);\n    frustum.setFromProjectionMatrix(projScreenMatrix);\n\n    const panorama = this.psv.config.panorama;\n    const verticesPosition = this.prop.geom.getAttribute(ATTR_POSITION);\n    const tilesToLoad = [];\n\n    for (let col = 0; col < panorama.cols; col++) {\n      for (let row = 0; row < panorama.rows; row++) {\n        // for each tile, find the vertices corresponding to the four corners (three for first and last rows)\n        // if at least one vertex is visible, the tile must be loaded\n        // for larger tiles we also test the four edges centers and the tile center\n\n        const verticesIndex = [];\n\n        if (row === 0) {\n          // bottom-left\n          const v0 = this.prop.facesByRow === 1\n            ? col * this.prop.facesByCol * this.NB_VERTICES_BY_SMALL_FACE + 1\n            : this.SPHERE_SEGMENTS * this.NB_VERTICES_BY_SMALL_FACE\n            + (this.prop.facesByRow - 2) * this.SPHERE_SEGMENTS * this.NB_VERTICES_BY_FACE\n            + col * this.prop.facesByCol * this.NB_VERTICES_BY_FACE + 4;\n\n          // bottom-right\n          const v1 = this.prop.facesByRow === 1\n            ? v0 + (this.prop.facesByCol - 1) * this.NB_VERTICES_BY_SMALL_FACE + 1\n            : v0 + (this.prop.facesByCol - 1) * this.NB_VERTICES_BY_FACE + 1;\n\n          // top (all vertices are equal)\n          const v2 = 0;\n\n          verticesIndex.push(v0, v1, v2);\n\n          if (this.prop.facesByCol >= this.SPHERE_SEGMENTS / 8) {\n            // bottom-center\n            const v4 = v0 + this.prop.facesByCol / 2 * this.NB_VERTICES_BY_FACE;\n\n            verticesIndex.push(v4);\n          }\n\n          if (this.prop.facesByRow >= this.SPHERE_HORIZONTAL_SEGMENTS / 4) {\n            // left-center\n            const v6 = v0 - this.prop.facesByRow / 2 * this.SPHERE_SEGMENTS * this.NB_VERTICES_BY_FACE;\n\n            // right-center\n            const v7 = v1 - this.prop.facesByRow / 2 * this.SPHERE_SEGMENTS * this.NB_VERTICES_BY_FACE;\n\n            verticesIndex.push(v6, v7);\n          }\n        }\n        else if (row === panorama.rows - 1) {\n          // top-left\n          const v0 = this.prop.facesByRow === 1\n            ? -this.SPHERE_SEGMENTS * this.NB_VERTICES_BY_SMALL_FACE\n            + row * this.prop.facesByRow * this.SPHERE_SEGMENTS * this.NB_VERTICES_BY_FACE\n            + col * this.prop.facesByCol * this.NB_VERTICES_BY_SMALL_FACE + 1\n            : -this.SPHERE_SEGMENTS * this.NB_VERTICES_BY_SMALL_FACE\n            + row * this.prop.facesByRow * this.SPHERE_SEGMENTS * this.NB_VERTICES_BY_FACE\n            + col * this.prop.facesByCol * this.NB_VERTICES_BY_FACE + 1;\n\n          // top-right\n          const v1 = this.prop.facesByRow === 1\n            ? v0 + (this.prop.facesByCol - 1) * this.NB_VERTICES_BY_SMALL_FACE - 1\n            : v0 + (this.prop.facesByCol - 1) * this.NB_VERTICES_BY_FACE - 1;\n\n          // bottom (all vertices are equal)\n          const v2 = this.NB_VERTICES - 1;\n\n          verticesIndex.push(v0, v1, v2);\n\n          if (this.prop.facesByCol >= this.SPHERE_SEGMENTS / 8) {\n            // top-center\n            const v4 = v0 + this.prop.facesByCol / 2 * this.NB_VERTICES_BY_FACE;\n\n            verticesIndex.push(v4);\n          }\n\n          if (this.prop.facesByRow >= this.SPHERE_HORIZONTAL_SEGMENTS / 4) {\n            // left-center\n            const v6 = v0 + this.prop.facesByRow / 2 * this.SPHERE_SEGMENTS * this.NB_VERTICES_BY_FACE;\n\n            // right-center\n            const v7 = v1 + this.prop.facesByRow / 2 * this.SPHERE_SEGMENTS * this.NB_VERTICES_BY_FACE;\n\n            verticesIndex.push(v6, v7);\n          }\n        }\n        else {\n          // top-left\n          const v0 = -this.SPHERE_SEGMENTS * this.NB_VERTICES_BY_SMALL_FACE\n            + row * this.prop.facesByRow * this.SPHERE_SEGMENTS * this.NB_VERTICES_BY_FACE\n            + col * this.prop.facesByCol * this.NB_VERTICES_BY_FACE + 1;\n\n          // bottom-left\n          const v1 = v0 + (this.prop.facesByRow - 1) * this.SPHERE_SEGMENTS * this.NB_VERTICES_BY_FACE + 3;\n\n          // bottom-right\n          const v2 = v1 + (this.prop.facesByCol - 1) * this.NB_VERTICES_BY_FACE + 1;\n\n          // top-right\n          const v3 = v0 + (this.prop.facesByCol - 1) * this.NB_VERTICES_BY_FACE - 1;\n\n          verticesIndex.push(v0, v1, v2, v3);\n\n          if (this.prop.facesByCol >= this.SPHERE_SEGMENTS / 8) {\n            // top-center\n            const v4 = v0 + this.prop.facesByCol / 2 * this.NB_VERTICES_BY_FACE;\n\n            // bottom-center\n            const v5 = v1 + this.prop.facesByCol / 2 * this.NB_VERTICES_BY_FACE;\n\n            verticesIndex.push(v4, v5);\n          }\n\n          if (this.prop.facesByRow >= this.SPHERE_HORIZONTAL_SEGMENTS / 4) {\n            // left-center\n            const v6 = v0 + this.prop.facesByRow / 2 * this.SPHERE_SEGMENTS * this.NB_VERTICES_BY_FACE;\n\n            // right-center\n            const v7 = v3 + this.prop.facesByRow / 2 * this.SPHERE_SEGMENTS * this.NB_VERTICES_BY_FACE;\n\n            verticesIndex.push(v6, v7);\n\n            if (this.prop.facesByCol >= this.SPHERE_SEGMENTS / 8) {\n              // center-center\n              const v8 = v6 + this.prop.facesByCol / 2 * this.NB_VERTICES_BY_FACE;\n\n              verticesIndex.push(v8);\n            }\n          }\n        }\n\n        // if (init && col === 0 && row === 0) {\n        //   verticesIndex.forEach((vertexIdx) => {\n        //     this.psv.renderer.scene.add(createDot(\n        //       verticesPosition.getX(vertexIdx),\n        //       verticesPosition.getY(vertexIdx),\n        //       verticesPosition.getZ(vertexIdx)\n        //     ));\n        //   });\n        // }\n\n        const vertexVisible = verticesIndex.some((vertexIdx) => {\n          vertexPosition.set(\n            verticesPosition.getX(vertexIdx),\n            verticesPosition.getY(vertexIdx),\n            verticesPosition.getZ(vertexIdx)\n          );\n          vertexPosition.applyEuler(this.psv.renderer.meshContainer.rotation);\n          return frustum.containsPoint(vertexPosition);\n        });\n\n        if (vertexVisible) {\n          let angle = vertexPosition.angleTo(this.psv.prop.direction);\n          if (row === 0 || row === panorama.rows - 1) {\n            angle *= 2; // lower priority to top and bottom tiles\n          }\n          tilesToLoad.push({ col, row, angle });\n        }\n      }\n    }\n\n    this.__loadTiles(tilesToLoad);\n  }\n\n  /**\n   * @summary Loads tiles and change existing tiles priority\n   * @param {PSV.adapters.EquirectangularTilesAdapter.Tile[]} tiles\n   * @private\n   */\n  __loadTiles(tiles) {\n    this.queue.disableAllTasks();\n\n    tiles.forEach((tile) => {\n      const id = tileId(tile);\n\n      if (this.prop.tiles[id]) {\n        this.queue.setPriority(id, tile.angle);\n      }\n      else {\n        this.prop.tiles[id] = true;\n        this.queue.enqueue(new Task(id, tile.angle, task => this.__loadTile(tile, task)));\n      }\n    });\n\n    this.queue.start();\n  }\n\n  /**\n   * @summary Loads and draw a tile\n   * @param {PSV.adapters.EquirectangularTilesAdapter.Tile} tile\n   * @param {PSV.adapters.Task} task\n   * @return {Promise}\n   * @private\n   */\n  __loadTile(tile, task) {\n    const panorama = this.psv.config.panorama;\n    const url = panorama.tileUrl(tile.col, tile.row);\n\n    if (this.psv.config.requestHeaders && typeof this.psv.config.requestHeaders === 'function') {\n      this.loader.setRequestHeader(this.psv.config.requestHeaders(url));\n    }\n\n    return new Promise((resolve, reject) => {\n      this.loader.load(url, resolve, undefined, reject);\n    })\n      .then((image) => {\n        if (!task.isCancelled()) {\n          const material = new MeshBasicMaterial({ map: utils.createTexture(image) });\n          this.__swapMaterial(tile.col, tile.row, material);\n          this.psv.needsUpdate();\n        }\n      })\n      .catch(() => {\n        if (!task.isCancelled() && this.config.showErrorTile) {\n          if (!this.prop.errorMaterial) {\n            this.prop.errorMaterial = buildErrorMaterial(this.prop.colSize, this.prop.rowSize);\n          }\n          this.__swapMaterial(tile.col, tile.row, this.prop.errorMaterial);\n          this.psv.needsUpdate();\n        }\n      });\n  }\n\n  /**\n   * @summary Applies a new texture to the faces\n   * @param {int} col\n   * @param {int} row\n   * @param {external:THREE.MeshBasicMaterial} material\n   * @private\n   */\n  __swapMaterial(col, row, material) {\n    const uvs = this.prop.geom.getAttribute(ATTR_UV);\n\n    for (let c = 0; c < this.prop.facesByCol; c++) {\n      for (let r = 0; r < this.prop.facesByRow; r++) {\n        // position of the face (two triangles of the same square)\n        const faceCol = col * this.prop.facesByCol + c;\n        const faceRow = row * this.prop.facesByRow + r;\n        const isFirstRow = faceRow === 0;\n        const isLastRow = faceRow === (this.SPHERE_HORIZONTAL_SEGMENTS - 1);\n\n        // first vertex for this face (3 or 6 vertices in total)\n        let firstVertex;\n        if (isFirstRow) {\n          firstVertex = faceCol * this.NB_VERTICES_BY_SMALL_FACE;\n        }\n        else if (isLastRow) {\n          firstVertex = this.NB_VERTICES\n            - this.SPHERE_SEGMENTS * this.NB_VERTICES_BY_SMALL_FACE\n            + faceCol * this.NB_VERTICES_BY_SMALL_FACE;\n        }\n        else {\n          firstVertex = this.SPHERE_SEGMENTS * this.NB_VERTICES_BY_SMALL_FACE\n            + (faceRow - 1) * this.SPHERE_SEGMENTS * this.NB_VERTICES_BY_FACE\n            + faceCol * this.NB_VERTICES_BY_FACE;\n        }\n\n        // swap material\n        const matIndex = this.prop.geom.groups.find(g => g.start === firstVertex).materialIndex;\n        this.prop.materials[matIndex] = material;\n\n        // define new uvs\n        const top = 1 - r / this.prop.facesByRow;\n        const bottom = 1 - (r + 1) / this.prop.facesByRow;\n        const left = c / this.prop.facesByCol;\n        const right = (c + 1) / this.prop.facesByCol;\n\n        if (isFirstRow) {\n          uvs.setXY(firstVertex, (left + right) / 2, top);\n          uvs.setXY(firstVertex + 1, left, bottom);\n          uvs.setXY(firstVertex + 2, right, bottom);\n        }\n        else if (isLastRow) {\n          uvs.setXY(firstVertex, right, top);\n          uvs.setXY(firstVertex + 1, left, top);\n          uvs.setXY(firstVertex + 2, (left + right) / 2, bottom);\n        }\n        else {\n          uvs.setXY(firstVertex, right, top);\n          uvs.setXY(firstVertex + 1, left, top);\n          uvs.setXY(firstVertex + 2, right, bottom);\n          uvs.setXY(firstVertex + 3, left, top);\n          uvs.setXY(firstVertex + 4, left, bottom);\n          uvs.setXY(firstVertex + 5, right, bottom);\n        }\n      }\n    }\n\n    uvs.needsUpdate = true;\n  }\n\n  /**\n   * @summary Create the texture for the base image\n   * @param {HTMLImageElement} img\n   * @return {external:THREE.Texture}\n   * @private\n   */\n  __createBaseTexture(img) {\n    if (img.width !== img.height * 2) {\n      utils.logWarn('Invalid base image, the width should be twice the height');\n    }\n\n    return createBaseTexture(img, this.config.baseBlur, w => w / 2);\n  }\n\n}\n"],"names":["Task","id","priority","fn","status","STATUS","PENDING","start","RUNNING","then","DONE","ERROR","cancel","CANCELLED","isCancelled","DISABLED","Queue","concurency","runningTasks","tasks","enqueue","task","clear","Object","values","forEach","setPriority","taskId","disableAllTasks","keys","length","nextTask","filter","sort","a","b","pop","buildErrorMaterial","width","height","canvas","document","createElement","ctx","getContext","fillStyle","fillRect","font","textAlign","textBaseline","fillText","texture","CanvasTexture","MeshBasicMaterial","map","createBaseTexture","img","blur","getHeight","SYSTEM","maxTextureWidth","ratio","Math","min","getMaxCanvasWidth","buffer","drawImage","utils","createTexture","ATTR_UV","ATTR_ORIGINAL_UV","ATTR_POSITION","tileId","tile","col","row","frustum","Frustum","projScreenMatrix","Matrix4","vertexPosition","Vector3","EquirectangularTilesAdapter","psv","options","config","useXmpData","resolution","showErrorTile","baseBlur","MathUtils","isPowerOfTwo","PSVError","SPHERE_SEGMENTS","SPHERE_HORIZONTAL_SEGMENTS","NB_VERTICES_BY_FACE","NB_VERTICES_BY_SMALL_FACE","NB_VERTICES","NB_GROUPS","queue","prop","colSize","rowSize","facesByCol","facesByRow","tiles","geom","materials","errorMaterial","loader","ImageLoader","withCredentials","setWithCredentials","requestHeaders","setRequestHeader","on","CONSTANTS","EVENTS","POSITION_UPDATED","ZOOM_UPDATED","destroy","off","__cleanup","dispose","handleEvent","e","type","__refresh","mat","supportsTransition","panorama","baseUrl","supportsPreload","loadTexture","cols","rows","tileUrl","Promise","reject","panoData","fullWidth","fullHeight","croppedWidth","croppedHeight","croppedX","croppedY","poseHeading","posePitch","poseRoll","basePanoData","textureData","resolve","createMesh","scale","geometry","SphereGeometry","SPHERE_RADIUS","PI","toNonIndexed","clearGroups","i","k","addGroup","setAttribute","getAttribute","clone","Mesh","setTexture","mesh","transition","__setTexture","material","setTimeout","opacity","transparent","push","setTextureOpacity","init","camera","renderer","updateMatrixWorld","multiplyMatrices","projectionMatrix","matrixWorldInverse","setFromProjectionMatrix","verticesPosition","tilesToLoad","verticesIndex","v0","v1","v2","v4","v6","v7","v3","v5","v8","vertexVisible","some","vertexIdx","set","getX","getY","getZ","applyEuler","meshContainer","rotation","containsPoint","angle","angleTo","direction","__loadTiles","__loadTile","url","load","undefined","image","__swapMaterial","needsUpdate","catch","uvs","c","r","faceCol","faceRow","isFirstRow","isLastRow","firstVertex","matIndex","groups","find","g","materialIndex","top","bottom","left","right","setXY","__createBaseTexture","logWarn","w","EquirectangularAdapter","supportsDownload","supportsOverlay"],"mappings":"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"}