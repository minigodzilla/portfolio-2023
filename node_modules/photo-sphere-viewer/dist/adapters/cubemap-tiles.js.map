{"version":3,"file":"cubemap-tiles.js","sources":["../../src/adapters/shared/Task.js","../../src/adapters/shared/Queue.js","../../src/adapters/shared/tiles-utils.js","../../src/adapters/cubemap-tiles/index.js"],"sourcesContent":["/**\n * @summary Loading task\n * @memberOf PSV.adapters\n * @private\n */\nexport class Task {\n\n  static STATUS = {\n    DISABLED : -1,\n    PENDING  : 0,\n    RUNNING  : 1,\n    CANCELLED: 2,\n    DONE     : 3,\n    ERROR    : 4,\n  };\n\n  /**\n   * @param {string} id\n   * @param {number} priority\n   * @param {function(Task): Promise} fn\n   */\n  constructor(id, priority, fn) {\n    this.id = id;\n    this.priority = priority;\n    this.fn = fn;\n    this.status = Task.STATUS.PENDING;\n  }\n\n  start() {\n    this.status = Task.STATUS.RUNNING;\n    return this.fn(this)\n      .then(() => {\n        this.status = Task.STATUS.DONE;\n      }, () => {\n        this.status = Task.STATUS.ERROR;\n      });\n  }\n\n  cancel() {\n    this.status = Task.STATUS.CANCELLED;\n  }\n\n  isCancelled() {\n    return this.status === Task.STATUS.CANCELLED;\n  }\n\n}\n","import { Task } from './Task';\n\n/**\n * @summary Loading queue\n * @memberOf PSV.adapters\n * @private\n */\nexport class Queue {\n\n  /**\n   * @param {int} concurency\n   */\n  constructor(concurency = 4) {\n    this.concurency = concurency;\n    this.runningTasks = {};\n    this.tasks = {};\n  }\n\n  enqueue(task) {\n    this.tasks[task.id] = task;\n  }\n\n  clear() {\n    Object.values(this.tasks).forEach(task => task.cancel());\n    this.tasks = {};\n    this.runningTasks = {};\n  }\n\n  setPriority(taskId, priority) {\n    const task = this.tasks[taskId];\n    if (task) {\n      task.priority = priority;\n      if (task.status === Task.STATUS.DISABLED) {\n        task.status = Task.STATUS.PENDING;\n      }\n    }\n  }\n\n  disableAllTasks() {\n    Object.values(this.tasks).forEach((task) => {\n      task.status = Task.STATUS.DISABLED;\n    });\n  }\n\n  start() {\n    if (Object.keys(this.runningTasks).length >= this.concurency) {\n      return;\n    }\n\n    const nextTask = Object.values(this.tasks)\n      .filter(task => task.status === Task.STATUS.PENDING)\n      .sort((a, b) => b.priority - a.priority)\n      .pop();\n\n    if (nextTask) {\n      this.runningTasks[nextTask.id] = true;\n\n      nextTask.start()\n        .then(() => {\n          if (!nextTask.isCancelled()) {\n            delete this.tasks[nextTask.id];\n            delete this.runningTasks[nextTask.id];\n            this.start();\n          }\n        });\n\n      this.start(); // start tasks until max concurrency is reached\n    }\n  }\n\n}\n","import { CanvasTexture, LineSegments, Mesh, MeshBasicMaterial, SphereGeometry, WireframeGeometry } from 'three';\nimport { SYSTEM, utils } from '../..';\n\n/**\n * @summary Generates an material for errored tiles\n * @memberOf PSV.adapters\n * @return {external:THREE.MeshBasicMaterial}\n * @private\n */\nexport function buildErrorMaterial(width, height) {\n  const canvas = document.createElement('canvas');\n  canvas.width = width;\n  canvas.height = height;\n\n  const ctx = canvas.getContext('2d');\n\n  ctx.fillStyle = '#333';\n  ctx.fillRect(0, 0, canvas.width, canvas.height);\n  ctx.font = `${canvas.width / 5}px serif`;\n  ctx.fillStyle = '#a22';\n  ctx.textAlign = 'center';\n  ctx.textBaseline = 'middle';\n  ctx.fillText('âš ', canvas.width / 2, canvas.height / 2);\n\n  const texture = new CanvasTexture(canvas);\n  return new MeshBasicMaterial({ map: texture });\n}\n\n/**\n * @summary Create the texture for the base image\n * @memberOf PSV.adapters\n * @param {HTMLImageElement} img\n * @param {boolean} blur\n * @param {function} getHeight\n * @return {external:THREE.Texture}\n * @private\n */\nexport function createBaseTexture(img, blur, getHeight) {\n  if (blur || img.width > SYSTEM.maxTextureWidth) {\n    const ratio = Math.min(1, SYSTEM.getMaxCanvasWidth() / img.width);\n\n    const buffer = document.createElement('canvas');\n    buffer.width = img.width * ratio;\n    buffer.height = getHeight(img.width);\n\n    const ctx = buffer.getContext('2d');\n    if (blur) {\n      ctx.filter = 'blur(1px)';\n    }\n    ctx.drawImage(img, 0, 0, buffer.width, buffer.height);\n\n    return utils.createTexture(buffer);\n  }\n\n  return utils.createTexture(img);\n}\n\n/**\n * @summary Creates a wireframe geometry, for debug\n * @memberOf PSV.adapters\n * @param {THREE.BufferGeometry} geometry\n * @return {THREE.Object3D}\n * @private\n */\nexport function createWireFrame(geometry) {\n  const wireframe = new WireframeGeometry(geometry);\n  const line = new LineSegments(wireframe);\n  line.material.depthTest = false;\n  line.material.opacity = 0.25;\n  line.material.transparent = true;\n  return line;\n}\n\n/**\n * @summary Creates a small red sphere, for debug\n * @memberOf PSV.adapters\n * @return {THREE.Object3D}\n * @private\n */\nexport function createDot(x, y, z) {\n  const geom = new SphereGeometry(0.1);\n  const material = new MeshBasicMaterial({ color: 0xff0000 });\n  const mesh = new Mesh(geom, material);\n  mesh.position.set(x, y, z);\n  return mesh;\n}\n","import {\n  BoxGeometry,\n  Frustum,\n  ImageLoader,\n  MathUtils,\n  Matrix4,\n  Mesh,\n  MeshBasicMaterial,\n  Vector2,\n  Vector3\n} from 'three';\nimport { CONSTANTS, PSVError, utils } from '../..';\nimport { CUBE_HASHMAP, CubemapAdapter } from '../cubemap';\nimport { Queue } from '../shared/Queue';\nimport { Task } from '../shared/Task';\nimport { buildErrorMaterial, createBaseTexture } from '../shared/tiles-utils';\n\nif (!CubemapAdapter) {\n  throw new PSVError('CubemapAdapter is missing, please load cubemap.js before cubemap-tiles.js');\n}\n\n\n/**\n * @callback TileUrl\n * @summary Function called to build a tile url\n * @memberOf PSV.adapters.CubemapTilesAdapter\n * @param {'left'|'front'|'right'|'back'|'top'|'bottom'} face\n * @param {int} col\n * @param {int} row\n * @returns {string}\n */\n\n/**\n * @typedef {Object} PSV.adapters.CubemapTilesAdapter.Panorama\n * @summary Configuration of a tiled cubemap\n * @property {PSV.adapters.CubemapAdapter.Cubemap} [baseUrl] - low resolution panorama loaded before tiles\n * @property {int} faceSize - size of a face\n * @property {int} nbTiles - number of tiles on a side of a face\n * @property {PSV.adapters.CubemapTilesAdapter.TileUrl} tileUrl - function to build a tile url\n */\n\n/**\n * @typedef {Object} PSV.adapters.CubemapTilesAdapter.Options\n * @property {boolean} [flipTopBottom=false] - set to true if the top and bottom faces are not correctly oriented\n * @property {boolean} [showErrorTile=true] - shows a warning sign on tiles that cannot be loaded\n * @property {boolean} [baseBlur=true] - applies a blur to the low resolution panorama\n */\n\n/**\n * @typedef {Object} PSV.adapters.CubemapTilesAdapter.Tile\n * @private\n * @property {int} face\n * @property {int} col\n * @property {int} row\n * @property {float} angle\n */\n\n\nconst CUBE_SEGMENTS = 16;\nconst NB_VERTICES_BY_FACE = 6;\nconst NB_VERTICES_BY_PLANE = NB_VERTICES_BY_FACE * CUBE_SEGMENTS * CUBE_SEGMENTS;\nconst NB_VERTICES = 6 * NB_VERTICES_BY_PLANE;\nconst NB_GROUPS_BY_FACE = CUBE_SEGMENTS * CUBE_SEGMENTS;\n\nconst ATTR_UV = 'uv';\nconst ATTR_ORIGINAL_UV = 'originaluv';\nconst ATTR_POSITION = 'position';\n\nfunction tileId(tile) {\n  return `${tile.face}:${tile.col}x${tile.row}`;\n}\n\nconst frustum = new Frustum();\nconst projScreenMatrix = new Matrix4();\nconst vertexPosition = new Vector3();\n\n/**\n * @summary Adapter for tiled cubemaps\n * @memberof PSV.adapters\n * @extends PSV.adapters.AbstractAdapter\n */\nexport class CubemapTilesAdapter extends CubemapAdapter {\n\n  static id = 'cubemap-tiles';\n  static supportsDownload = false;\n  static supportsOverlay = false;\n\n  /**\n   * @param {PSV.Viewer} psv\n   * @param {PSV.adapters.CubemapTilesAdapter.Options} options\n   */\n  constructor(psv, options) {\n    super(psv);\n\n    /**\n     * @member {PSV.adapters.CubemapTilesAdapter.Options}\n     * @private\n     */\n    this.config = {\n      flipTopBottom: false,\n      showErrorTile: true,\n      baseBlur     : true,\n      ...options,\n    };\n\n    /**\n     * @member {PSV.adapters.Queue}\n     * @private\n     */\n    this.queue = new Queue();\n\n    /**\n     * @type {Object}\n     * @property {int} tileSize - size in pixels of a tile\n     * @property {int} facesByTile - number of mesh faces by tile\n     * @property {Record<string, boolean>} tiles - loaded tiles\n     * @property {external:THREE.BoxGeometry} geom\n     * @property {external:THREE.MeshBasicMaterial[]} materials\n     * @property {external:THREE.MeshBasicMaterial} errorMaterial\n     * @private\n     */\n    this.prop = {\n      tileSize     : 0,\n      facesByTile  : 0,\n      tiles        : {},\n      geom         : null,\n      materials    : [],\n      errorMaterial: null,\n    };\n\n    /**\n     * @member {external:THREE.ImageLoader}\n     * @private\n     */\n    this.loader = new ImageLoader();\n    if (this.psv.config.withCredentials) {\n      this.loader.setWithCredentials(true);\n    }\n    if (this.psv.config.requestHeaders && typeof this.psv.config.requestHeaders === 'object') {\n      this.loader.setRequestHeader(this.psv.config.requestHeaders);\n    }\n\n    this.psv.on(CONSTANTS.EVENTS.POSITION_UPDATED, this);\n    this.psv.on(CONSTANTS.EVENTS.ZOOM_UPDATED, this);\n  }\n\n  /**\n   * @override\n   */\n  destroy() {\n    this.psv.off(CONSTANTS.EVENTS.POSITION_UPDATED, this);\n    this.psv.off(CONSTANTS.EVENTS.ZOOM_UPDATED, this);\n\n    this.__cleanup();\n\n    this.prop.errorMaterial?.map?.dispose();\n    this.prop.errorMaterial?.dispose();\n\n    delete this.queue;\n    delete this.loader;\n    delete this.prop.geom;\n    delete this.prop.errorMaterial;\n\n    super.destroy();\n  }\n\n  /**\n   * @private\n   */\n  handleEvent(e) {\n    /* eslint-disable */\n    switch (e.type) {\n      case CONSTANTS.EVENTS.POSITION_UPDATED:\n      case CONSTANTS.EVENTS.ZOOM_UPDATED:\n        this.__refresh();\n        break;\n    }\n    /* eslint-enable */\n  }\n\n  /**\n   * @summary Clears loading queue, dispose all materials\n   * @private\n   */\n  __cleanup() {\n    this.queue.clear();\n    this.prop.tiles = {};\n\n    this.prop.materials.forEach((mat) => {\n      mat?.map?.dispose();\n      mat?.dispose();\n    });\n    this.prop.materials.length = 0;\n  }\n\n  /**\n   * @override\n   */\n  supportsTransition(panorama) {\n    return !!panorama.baseUrl;\n  }\n\n  /**\n   * @override\n   */\n  supportsPreload(panorama) {\n    return !!panorama.baseUrl;\n  }\n\n  /**\n   * @override\n   * @param {PSV.adapters.CubemapTilesAdapter.Panorama} panorama\n   * @returns {Promise.<PSV.TextureData>}\n   */\n  loadTexture(panorama) {\n    if (typeof panorama !== 'object' || !panorama.faceSize || !panorama.nbTiles || !panorama.tileUrl) {\n      return Promise.reject(new PSVError('Invalid panorama configuration, are you using the right adapter?'));\n    }\n    if (panorama.nbTiles > CUBE_SEGMENTS) {\n      return Promise.reject(new PSVError(`Panorama nbTiles must not be greater than ${CUBE_SEGMENTS}.`));\n    }\n    if (!MathUtils.isPowerOfTwo(panorama.nbTiles)) {\n      return Promise.reject(new PSVError('Panorama nbTiles must be power of 2.'));\n    }\n\n    if (panorama.baseUrl) {\n      return super.loadTexture(panorama.baseUrl)\n        .then(textureData => ({\n          panorama: panorama,\n          texture : textureData.texture,\n        }));\n    }\n    else {\n      return Promise.resolve({ panorama });\n    }\n  }\n\n  /**\n   * @override\n   */\n  createMesh(scale = 1) {\n    const cubeSize = CONSTANTS.SPHERE_RADIUS * 2 * scale;\n    const geometry = new BoxGeometry(cubeSize, cubeSize, cubeSize, CUBE_SEGMENTS, CUBE_SEGMENTS, CUBE_SEGMENTS)\n      .scale(1, 1, -1)\n      .toNonIndexed();\n\n    geometry.clearGroups();\n    for (let i = 0, k = 0; i < NB_VERTICES; i += NB_VERTICES_BY_FACE) {\n      geometry.addGroup(i, NB_VERTICES_BY_FACE, k++);\n    }\n\n    geometry.setAttribute(ATTR_ORIGINAL_UV, geometry.getAttribute(ATTR_UV).clone());\n\n    return new Mesh(geometry, []);\n  }\n\n  /**\n   * @summary Applies the base texture and starts the loading of tiles\n   * @override\n   */\n  setTexture(mesh, textureData, transition) {\n    const { panorama, texture } = textureData;\n\n    if (transition) {\n      this.__setTexture(mesh, texture);\n      return;\n    }\n\n    this.__cleanup();\n    this.__setTexture(mesh, texture);\n\n    this.prop.materials = mesh.material;\n    this.prop.geom = mesh.geometry;\n    this.prop.geom.setAttribute(ATTR_UV, this.prop.geom.getAttribute(ATTR_ORIGINAL_UV).clone());\n\n    this.prop.tileSize = panorama.faceSize / panorama.nbTiles;\n    this.prop.facesByTile = CUBE_SEGMENTS / panorama.nbTiles;\n\n    // this.psv.renderer.scene.add(createWireFrame(this.prop.geom));\n\n    setTimeout(() => this.__refresh(true));\n  }\n\n  /**\n   * @private\n   */\n  __setTexture(mesh, texture) {\n    for (let i = 0; i < 6; i++) {\n      let material;\n      if (texture) {\n        if (this.config.flipTopBottom && (i === 2 || i === 3)) {\n          texture[i].center = new Vector2(0.5, 0.5);\n          texture[i].rotation = Math.PI;\n        }\n\n        material = new MeshBasicMaterial({ map: texture[i] });\n      }\n      else {\n        material = new MeshBasicMaterial({ opacity: 0, transparent: true });\n      }\n\n      for (let j = 0; j < NB_GROUPS_BY_FACE; j++) {\n        mesh.material.push(material);\n      }\n    }\n  }\n\n  /**\n   * @override\n   */\n  setTextureOpacity(mesh, opacity) {\n    for (let i = 0; i < 6; i++) {\n      mesh.material[i * NB_GROUPS_BY_FACE].opacity = opacity;\n      mesh.material[i * NB_GROUPS_BY_FACE].transparent = opacity < 1;\n    }\n  }\n\n  /**\n   * @summary Compute visible tiles and load them\n   * @private\n   */\n  __refresh(init = false) { // eslint-disable-line no-unused-vars\n    if (!this.prop.geom) {\n      return;\n    }\n\n    const camera = this.psv.renderer.camera;\n    camera.updateMatrixWorld();\n    projScreenMatrix.multiplyMatrices(camera.projectionMatrix, camera.matrixWorldInverse);\n    frustum.setFromProjectionMatrix(projScreenMatrix);\n\n    const panorama = this.psv.config.panorama;\n    const verticesPosition = this.prop.geom.getAttribute(ATTR_POSITION);\n    const tilesToLoad = [];\n\n    for (let face = 0; face < 6; face++) {\n      for (let col = 0; col < panorama.nbTiles; col++) {\n        for (let row = 0; row < panorama.nbTiles; row++) {\n          // for each tile, find the vertices corresponding to the four corners\n          // if at least one vertex is visible, the tile must be loaded\n          // for larger tiles we also test the four edges centers and the tile center\n          const verticesIndex = [];\n\n          // top-left\n          const v0 = face * NB_VERTICES_BY_PLANE\n            + row * this.prop.facesByTile * CUBE_SEGMENTS * NB_VERTICES_BY_FACE\n            + col * this.prop.facesByTile * NB_VERTICES_BY_FACE;\n\n          // bottom-left\n          const v1 = v0 + CUBE_SEGMENTS * NB_VERTICES_BY_FACE * (this.prop.facesByTile - 1) + 1;\n\n          // bottom-right\n          const v2 = v1 + this.prop.facesByTile * NB_VERTICES_BY_FACE - 3;\n\n          // top-right\n          const v3 = v0 + this.prop.facesByTile * NB_VERTICES_BY_FACE - 1;\n\n          verticesIndex.push(v0, v1, v2, v3);\n\n          if (this.prop.facesByTile >= CUBE_SEGMENTS / 2) {\n            // top-center\n            const v4 = v0 + this.prop.facesByTile / 2 * NB_VERTICES_BY_FACE - 1;\n\n            // bottom-center\n            const v5 = v1 + this.prop.facesByTile / 2 * NB_VERTICES_BY_FACE - 3;\n\n            // left-center\n            const v6 = v0 + CUBE_SEGMENTS * NB_VERTICES_BY_FACE * (this.prop.facesByTile / 2 - 1) + 1;\n\n            // right-center\n            const v7 = v6 + this.prop.facesByTile * NB_VERTICES_BY_FACE - 3;\n\n            // center-center\n            const v8 = v6 + this.prop.facesByTile / 2 * NB_VERTICES_BY_FACE;\n\n            verticesIndex.push(v4, v5, v6, v7, v8);\n          }\n\n          // if (init && face === 5 && col === 0 && row === 0) {\n          //   verticesIndex.forEach((vertexIdx) => {\n          //     this.psv.renderer.scene.add(createDot(\n          //       verticesPosition.getX(vertexIdx),\n          //       verticesPosition.getY(vertexIdx),\n          //       verticesPosition.getZ(vertexIdx)\n          //     ));\n          //   });\n          // }\n\n          const vertexVisible = verticesIndex.some((vertexIdx) => {\n            vertexPosition.set(\n              verticesPosition.getX(vertexIdx),\n              verticesPosition.getY(vertexIdx),\n              verticesPosition.getZ(vertexIdx)\n            );\n            vertexPosition.applyEuler(this.psv.renderer.meshContainer.rotation);\n            return frustum.containsPoint(vertexPosition);\n          });\n\n          if (vertexVisible) {\n            const angle = vertexPosition.angleTo(this.psv.prop.direction);\n            tilesToLoad.push({ face, col, row, angle });\n          }\n        }\n      }\n    }\n\n    this.__loadTiles(tilesToLoad);\n  }\n\n  /**\n   * @summary Loads tiles and change existing tiles priority\n   * @param {PSV.adapters.CubemapTilesAdapter.Tile[]} tiles\n   * @private\n   */\n  __loadTiles(tiles) {\n    this.queue.disableAllTasks();\n\n    tiles.forEach((tile) => {\n      const id = tileId(tile);\n\n      if (this.prop.tiles[id]) {\n        this.queue.setPriority(id, tile.angle);\n      }\n      else {\n        this.prop.tiles[id] = true;\n        this.queue.enqueue(new Task(id, tile.angle, task => this.__loadTile(tile, task)));\n      }\n    });\n\n    this.queue.start();\n  }\n\n  /**\n   * @summary Loads and draw a tile\n   * @param {PSV.adapters.CubemapTilesAdapter.Tile} tile\n   * @param {PSV.adapters.Task} task\n   * @return {Promise}\n   * @private\n   */\n  __loadTile(tile, task) {\n    const panorama = this.psv.config.panorama;\n\n    let { col, row } = tile;\n    if (this.config.flipTopBottom && (tile.face === 2 || tile.face === 3)) {\n      col = panorama.nbTiles - col - 1;\n      row = panorama.nbTiles - row - 1;\n    }\n    const url = panorama.tileUrl(CUBE_HASHMAP[tile.face], col, row);\n\n    if (this.psv.config.requestHeaders && typeof this.psv.config.requestHeaders === 'function') {\n      this.loader.setRequestHeader(this.psv.config.requestHeaders(url));\n    }\n\n    return new Promise((resolve, reject) => {\n      this.loader.load(url, resolve, undefined, reject);\n    })\n      .then((image) => {\n        if (!task.isCancelled()) {\n          const material = new MeshBasicMaterial({ map: utils.createTexture(image) });\n          this.__swapMaterial(tile.face, tile.col, tile.row, material);\n          this.psv.needsUpdate();\n        }\n      })\n      .catch(() => {\n        if (!task.isCancelled() && this.config.showErrorTile) {\n          if (!this.prop.errorMaterial) {\n            this.prop.errorMaterial = buildErrorMaterial(this.prop.tileSize, this.prop.tileSize);\n          }\n          this.__swapMaterial(tile.face, tile.col, tile.row, this.prop.errorMaterial);\n          this.psv.needsUpdate();\n        }\n      });\n  }\n\n  /**\n   * @summary Applies a new texture to the faces\n   * @param {int} face\n   * @param {int} col\n   * @param {int} row\n   * @param {external:THREE.MeshBasicMaterial} material\n   * @private\n   */\n  __swapMaterial(face, col, row, material) {\n    const uvs = this.prop.geom.getAttribute(ATTR_UV);\n\n    for (let c = 0; c < this.prop.facesByTile; c++) {\n      for (let r = 0; r < this.prop.facesByTile; r++) {\n        // position of the face (two triangles of the same square)\n        const faceCol = col * this.prop.facesByTile + c;\n        const faceRow = row * this.prop.facesByTile + r;\n\n        // first vertex for this face (6 vertices in total)\n        const firstVertex = NB_VERTICES_BY_PLANE * face + 6 * (CUBE_SEGMENTS * faceRow + faceCol);\n\n        // swap material\n        const matIndex = this.prop.geom.groups.find(g => g.start === firstVertex).materialIndex;\n        this.prop.materials[matIndex] = material;\n\n        // define new uvs\n        let top = 1 - r / this.prop.facesByTile;\n        let bottom = 1 - (r + 1) / this.prop.facesByTile;\n        let left = c / this.prop.facesByTile;\n        let right = (c + 1) / this.prop.facesByTile;\n\n        if (this.config.flipTopBottom && (face === 2 || face === 3)) {\n          top = 1 - top;\n          bottom = 1 - bottom;\n          left = 1 - left;\n          right = 1 - right;\n        }\n\n        uvs.setXY(firstVertex, left, top);\n        uvs.setXY(firstVertex + 1, left, bottom);\n        uvs.setXY(firstVertex + 2, right, top);\n        uvs.setXY(firstVertex + 3, left, bottom);\n        uvs.setXY(firstVertex + 4, right, bottom);\n        uvs.setXY(firstVertex + 5, right, top);\n      }\n    }\n\n    uvs.needsUpdate = true;\n  }\n\n  /**\n   * @summary Create the texture for the base image\n   * @param {HTMLImageElement} img\n   * @return {external:THREE.Texture}\n   * @override\n   * @private\n   */\n  __createCubemapTexture(img) {\n    if (img.width !== img.height) {\n      utils.logWarn('Invalid base image, the width should equals the height');\n    }\n\n    return createBaseTexture(img, this.config.baseBlur, w => w);\n  }\n\n}\n"],"names":["Task","id","priority","fn","status","STATUS","PENDING","start","RUNNING","then","DONE","ERROR","cancel","CANCELLED","isCancelled","DISABLED","Queue","concurency","runningTasks","tasks","enqueue","task","clear","Object","values","forEach","setPriority","taskId","disableAllTasks","keys","length","nextTask","filter","sort","a","b","pop","buildErrorMaterial","width","height","canvas","document","createElement","ctx","getContext","fillStyle","fillRect","font","textAlign","textBaseline","fillText","texture","CanvasTexture","MeshBasicMaterial","map","createBaseTexture","img","blur","getHeight","SYSTEM","maxTextureWidth","ratio","Math","min","getMaxCanvasWidth","buffer","drawImage","utils","createTexture","CubemapAdapter","PSVError","CUBE_SEGMENTS","NB_VERTICES_BY_FACE","NB_VERTICES_BY_PLANE","NB_VERTICES","NB_GROUPS_BY_FACE","ATTR_UV","ATTR_ORIGINAL_UV","ATTR_POSITION","tileId","tile","face","col","row","frustum","Frustum","projScreenMatrix","Matrix4","vertexPosition","Vector3","CubemapTilesAdapter","psv","options","config","flipTopBottom","showErrorTile","baseBlur","queue","prop","tileSize","facesByTile","tiles","geom","materials","errorMaterial","loader","ImageLoader","withCredentials","setWithCredentials","requestHeaders","setRequestHeader","on","CONSTANTS","EVENTS","POSITION_UPDATED","ZOOM_UPDATED","destroy","off","__cleanup","dispose","handleEvent","e","type","__refresh","mat","supportsTransition","panorama","baseUrl","supportsPreload","loadTexture","faceSize","nbTiles","tileUrl","Promise","reject","MathUtils","isPowerOfTwo","textureData","resolve","createMesh","scale","cubeSize","SPHERE_RADIUS","geometry","BoxGeometry","toNonIndexed","clearGroups","i","k","addGroup","setAttribute","getAttribute","clone","Mesh","setTexture","mesh","transition","__setTexture","material","setTimeout","center","Vector2","rotation","PI","opacity","transparent","j","push","setTextureOpacity","init","camera","renderer","updateMatrixWorld","multiplyMatrices","projectionMatrix","matrixWorldInverse","setFromProjectionMatrix","verticesPosition","tilesToLoad","verticesIndex","v0","v1","v2","v3","v4","v5","v6","v7","v8","vertexVisible","some","vertexIdx","set","getX","getY","getZ","applyEuler","meshContainer","containsPoint","angle","angleTo","direction","__loadTiles","__loadTile","url","CUBE_HASHMAP","load","undefined","image","__swapMaterial","needsUpdate","catch","uvs","c","r","faceCol","faceRow","firstVertex","matIndex","groups","find","g","materialIndex","top","bottom","left","right","setXY","__createCubemapTexture","logWarn","w","supportsDownload","supportsOverlay"],"mappings":"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"}